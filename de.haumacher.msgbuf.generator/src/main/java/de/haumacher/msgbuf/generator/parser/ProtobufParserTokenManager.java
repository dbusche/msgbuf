/* Generated By:JavaCC: Do not edit this line. ProtobufParserTokenManager.java */
package de.haumacher.msgbuf.generator.parser;
import de.haumacher.msgbuf.generator.ast.*;
import de.haumacher.msgbuf.generator.common.Util;

/** Token Manager. */
public class ProtobufParserTokenManager implements ProtobufParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 32;
            return 35;
         }
         if ((active0 & 0x27ffd00L) != 0L)
         {
            jjmatchedKind = 32;
            return 30;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 32;
            return 51;
         }
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 32;
            return 68;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 32;
            return 93;
         }
         return -1;
      case 1:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
            return 92;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
            return 50;
         }
         if ((active0 & 0x2efff00L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
            return 30;
         }
         if ((active0 & 0x100000L) != 0L)
            return 30;
         return -1;
      case 2:
         if ((active0 & 0x1000000L) != 0L)
            return 49;
         if ((active0 & 0x2cfef00L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
            return 30;
         }
         if ((active0 & 0x201000L) != 0L)
            return 30;
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
            return 91;
         }
         return -1;
      case 3:
         if ((active0 & 0x8fe700L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
            return 30;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 3;
            return 30;
         }
         if ((active0 & 0x2400800L) != 0L)
            return 30;
         return -1;
      case 4:
         if ((active0 & 0x40fc700L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
            return 30;
         }
         if ((active0 & 0x802000L) != 0L)
            return 30;
         return -1;
      case 5:
         if ((active0 & 0x40ec500L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 5;
            return 30;
         }
         if ((active0 & 0x10200L) != 0L)
            return 30;
         return -1;
      case 6:
         if ((active0 & 0x4020500L) != 0L)
            return 30;
         if ((active0 & 0xcc000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 6;
            return 30;
         }
         return -1;
      case 7:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 7;
            return 30;
         }
         if ((active0 & 0xc4000L) != 0L)
            return 30;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 38);
      case 41:
         return jjStopAtPos(0, 39);
      case 44:
         return jjStopAtPos(0, 41);
      case 46:
         return jjStopAtPos(0, 45);
      case 59:
         return jjStopAtPos(0, 34);
      case 60:
         return jjStopAtPos(0, 43);
      case 61:
         return jjStopAtPos(0, 33);
      case 62:
         return jjStopAtPos(0, 44);
      case 64:
         return jjStopAtPos(0, 37);
      case 91:
         return jjStopAtPos(0, 40);
      case 93:
         return jjStopAtPos(0, 42);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20800L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x201400L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x12000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x84000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x508000L);
      case 123:
         return jjStopAtPos(0, 35);
      case 125:
         return jjStopAtPos(0, 36);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xa01100L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x84400L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1002800L);
      case 111:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 30);
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x408000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000200L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 112:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 30);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0400L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 49);
         return jjMoveStringLiteralDfa3_0(active0, 0x30000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400800L);
      case 120:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0xa4000L);
      case 103:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 30);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 109:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 30);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800400L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x40200L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4700L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 102:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 30);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4040000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x500L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 30);
         break;
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 120:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 30);
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 30);
         return jjMoveStringLiteralDfa7_0(active0, 0x8c000L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 30);
         break;
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 14, 30);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 30);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 15, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 119;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 35:
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(30);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(30);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(30);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(30);
                  break;
               case 5:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAddTwoStates(11, 8);
                  }
                  else if (curChar == 47)
                     jjAddStates(0, 4);
                  else if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 39)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 48)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAdd(8);
                  }
                  else if (curChar == 45)
                     jjAddStates(11, 12);
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(30);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(30);
                  }
                  if (curChar == 54)
                     jjCheckNAdd(42);
                  else if (curChar == 51)
                     jjCheckNAdd(36);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(30);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(30);
                  break;
               case 6:
                  if (curChar == 45)
                     jjAddStates(11, 12);
                  break;
               case 7:
                  if (curChar != 48)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if (curChar == 46)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddTwoStates(11, 8);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddTwoStates(11, 8);
                  break;
               case 12:
               case 17:
                  if (curChar == 39)
                     jjCheckNAddStates(8, 10);
                  break;
               case 13:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 14:
                  if (curChar == 39 && kind > 29)
                     kind = 29;
                  break;
               case 16:
                  if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  break;
               case 19:
               case 23:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  break;
               case 20:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 21:
                  if (curChar == 34 && kind > 29)
                     kind = 29;
                  break;
               case 24:
                  if (curChar == 39)
                     jjCheckNAddStates(5, 7);
                  break;
               case 27:
                  jjAddStates(13, 14);
                  break;
               case 36:
                  if (curChar == 50 && kind > 27)
                     kind = 27;
                  break;
               case 37:
               case 56:
               case 65:
               case 69:
                  if (curChar == 51)
                     jjCheckNAdd(36);
                  break;
               case 42:
                  if (curChar == 52 && kind > 27)
                     kind = 27;
                  break;
               case 43:
               case 60:
               case 75:
               case 79:
                  if (curChar == 54)
                     jjCheckNAdd(42);
                  break;
               case 52:
                  if (curChar == 54)
                     jjCheckNAdd(42);
                  break;
               case 98:
                  if (curChar == 47)
                     jjAddStates(0, 4);
                  break;
               case 99:
                  if (curChar == 42)
                     jjCheckNAdd(100);
                  break;
               case 100:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 101:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 102:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 103:
                  if (curChar == 47 && kind > 5)
                     kind = 5;
                  break;
               case 104:
               case 105:
                  if (curChar == 42)
                     jjCheckNAdd(103);
                  break;
               case 106:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(108, 109);
                  break;
               case 108:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(108, 109);
                  break;
               case 109:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 110:
                  if (curChar == 42)
                     jjCheckNAddStates(18, 20);
                  break;
               case 111:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 112:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 114:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 115:
               case 117:
                  if (curChar == 42)
                     jjCheckNAdd(114);
                  break;
               case 116:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 118:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(30);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 34;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 91:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(30);
                  }
                  if (curChar == 108)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  break;
               case 93:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(30);
                  }
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 96;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 68:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(30);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 88;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 83;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 77;
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 73;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(30);
                  }
                  else if (curChar == 96)
                     jjCheckNAdd(27);
                  if (curChar == 98)
                     jjAddStates(21, 22);
                  else if (curChar == 115)
                     jjAddStates(23, 27);
                  else if (curChar == 117)
                     jjAddStates(28, 29);
                  else if (curChar == 105)
                     jjAddStates(30, 31);
                  else if (curChar == 102)
                     jjAddStates(32, 34);
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 92:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(30);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 49:
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(30);
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(30);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 53;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(30);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 52;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 0:
                  if (curChar == 101 && kind > 27)
                     kind = 27;
                  break;
               case 1:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 15:
                  if (curChar == 92)
                     jjAddStates(35, 37);
                  break;
               case 18:
                  if (curChar == 92)
                     jjCheckNAddStates(8, 10);
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 22:
                  if (curChar == 92)
                     jjAddStates(38, 40);
                  break;
               case 25:
                  if (curChar == 92)
                     jjCheckNAddStates(5, 7);
                  break;
               case 26:
                  if (curChar == 96)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 96 && kind > 30)
                     kind = 30;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if (curChar == 102)
                     jjAddStates(32, 34);
                  break;
               case 32:
                  if (curChar == 116 && kind > 27)
                     kind = 27;
                  break;
               case 33:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 38:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 44:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 105)
                     jjAddStates(30, 31);
                  break;
               case 53:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 117)
                     jjAddStates(28, 29);
                  break;
               case 57:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 61:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 115)
                     jjAddStates(23, 27);
                  break;
               case 66:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 70:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 76:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 80:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 103 && kind > 27)
                     kind = 27;
                  break;
               case 86:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 98)
                     jjAddStates(21, 22);
                  break;
               case 94:
                  if (curChar == 115 && kind > 27)
                     kind = 27;
                  break;
               case 95:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 100:
               case 102:
                  jjCheckNAddStates(15, 17);
                  break;
               case 108:
                  jjAddStates(41, 42);
                  break;
               case 111:
               case 113:
                  jjCheckNAddStates(18, 20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(8, 10);
                  break;
               case 20:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(5, 7);
                  break;
               case 27:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(13, 14);
                  break;
               case 100:
               case 102:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(15, 17);
                  break;
               case 108:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(41, 42);
                  break;
               case 111:
               case 113:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(18, 20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 119 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   99, 106, 107, 116, 118, 20, 21, 22, 13, 14, 15, 7, 10, 27, 28, 100, 
   101, 104, 111, 112, 115, 93, 97, 68, 74, 78, 84, 89, 59, 63, 51, 54, 
   35, 41, 47, 16, 17, 18, 23, 24, 25, 108, 109, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\160\141\143\153\141\147\145", 
"\163\171\156\164\141\170", "\155\145\163\163\141\147\145", "\145\156\165\155", "\155\141\160", 
"\157\156\145\157\146", "\162\145\160\145\141\164\145\144", "\164\162\141\156\163\151\145\156\164", 
"\157\160\164\151\157\156", "\145\170\164\145\156\144\163", "\141\142\163\164\162\141\143\164", 
"\162\145\163\145\162\166\145\144", "\164\157", "\155\141\170", "\164\162\165\145", "\146\141\154\163\145", 
"\151\156\164", "\154\157\156\147", "\142\157\157\154\145\141\156", null, null, null, null, 
null, null, "\75", "\73", "\173", "\175", "\100", "\50", "\51", "\133", "\54", 
"\135", "\74", "\76", "\56", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x3fff7fffff01L, 
};
static final long[] jjtoSkip = {
   0xfeL, 
};
static final long[] jjtoSpecial = {
   0x80L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[119];
private final int[] jjstateSet = new int[238];
protected char curChar;
/** Constructor. */
public ProtobufParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ProtobufParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 119; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
