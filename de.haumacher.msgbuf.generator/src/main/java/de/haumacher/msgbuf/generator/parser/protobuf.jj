/**
 * JavaCC Grammar File
 */
options
{
    JDK_VERSION = "1.8";
    STATIC = false;
    UNICODE_INPUT = true;
    JAVA_UNICODE_ESCAPE = false;
}

PARSER_BEGIN(ProtobufParser)
package de.haumacher.msgbuf.generator.parser;

import de.haumacher.msgbuf.generator.Util;
import de.haumacher.msgbuf.generator.ast.*;

/**
 * Parser for protobuf definition files..
 */
public class ProtobufParser {
   
}
PARSER_END(ProtobufParser)

<DEFAULT>

SKIP :
{
  < SPACE :  " " >
| < TAB : "\t" >
| < CR : "\r" >
| < NL : "\n" >
| < BLOCK_COMMENT : "/*" ~["*"] ( ~[ "*" ] | "*" ~[ "/" ] )* "*/" | "/**/" >
| < LINE_COMMENT : "//" ( ~[ "\r", "\n" ] )* [ "\r", "\n" ] >
}

<DEFAULT>

SPECIAL_TOKEN:
{
  < DOC_COMMENT : "/**" ( ~[ "*" ] | "*" ~[ "/" ] )* "*/" | "/**/" >
}

TOKEN :
{
  < PACKAGE : "package" >
| < SYNTAX : "syntax" >
| < MESSAGE : "message" >
| < ENUM : "enum" >
| < MAP : "map" >
| < ONEOF : "oneof" >
| < REPEATED : "repeated" >
| < TRANSIENT : "transient" >
| < OPTION : "option" >
| < EXTENDS : "extends" >
| < ABSTRACT : "abstract" >
| < RESERVED : "reserved" >
| < TO : "to" >
| < MAX : "max" >
| < TRUE : "true" >
| < FALSE : "false" >
| < INT_TYPE : "int" >
| < LONG_TYPE : "long" >
| < BOOLEAN_TYPE : "boolean" >
| < TYPE :
    "double" |
    "float" |
    "int32" |
    "uint32" |
    "sint32" |
    "fixed32" |
    "sfixed32" |
    "int64" |
    "uint64" |
    "sint64" |
    "fixed64" |
    "sfixed64" |
    "bool" |
    "string" |
    "bytes"
  >
| < NUMBER : ( "-" )? ("0" | ( [ "1"-"9" ] ([ "0"-"9" ])* )) ("." ([ "0"-"9" ])+)? >
| < STRING : "'" (~[ "'", "\\" ] | < QUOTE > )* "'" | "\"" (~[ "\"", "\\" ] | < QUOTE > )* "\"" >
| < XNAME : "`" (~[ "`" ] )+ "`" >
| < #QUOTE : "\\\\" | "\\'" | "\\\"" >
| < NAME : [ "A"-"Z", "a"-"z", "_" ] ([ "A"-"Z", "a"-"z", "_", "0"-"9"])* >
}

DefinitionFile file() :
{
  DefinitionFile result = DefinitionFile.create();
  QName pkgName;
  Definition<?> def;
}
{
  (    < SYNTAX > "=" < STRING > ";"
  )?
  
  (
    < PACKAGE > pkgName = qName() ";"
    {
		result.setPackage(pkgName);
    }
  )?
  
  (    optionStatement(result)
  )*
  
  (    def = definition()
    {
      result.addDefinition(def);
    }
  )*
  {
    return result;
  }
}

void optionStatement(WithOptions<?> part) :
{
}
{
  < OPTION > optionAssignment(part) ";"
}

void optionAssignment(WithOptions<?> part) :
{
  Option<?> option;
  Token t;
}
{
  t=< NAME >
  (    "=" option=value()
  	{ part.getOptions().put(t.image, option); }
  |
  	{ part.getOptions().put(t.image, Flag.create().setValue(true)); }
  )
}

Option<?> value() :
{
  Option<?> result;
  Token t;
}
{
  (    t=< STRING >
    { result = StringOption.create().setValue(Util.stringContent(t.image)); }
  | t=< NUMBER >
    { result = NumberOption.create().setValue(Double.parseDouble(t.image)); }
  | < TRUE >
    { result = Flag.create().setValue(true); }
  | < FALSE >
    { result = Flag.create().setValue(false); }
  )
  {
    return result;
  }
}

Definition<?> definition() :
{
  String comment;
  Definition<?> result;
  WithOptions<?> options;
}
{
  { comment = Util.stripComment(token.next); }
  
  options = javaAnnotations()
  ( result = message()
  | result = enumeration()
  )
  {
    result.setComment(comment);
    if (options != null) result.setOptions(options.getOptions());
    return result;
  }
}

DefinitionBase<?> memberDefinition() :
{
  String comment;
  DefinitionBase<?> result;
  WithOptions<?> options;
}
{
  { comment = Util.stripComment(token.next); }
  
  options = javaAnnotations()
  ( result = message()
  | result = enumeration()
  | result = field()
  )
  {
    result.setComment(comment);
    if (options != null) result.setOptions(options.getOptions());
    return result;
  }
}

EnumDef enumeration() :
{
  EnumDef result = EnumDef.create();
  String name;
  Constant constant;
  Token d;
}
{
  d=< ENUM > name = name() "{"
  {
    result.setName(name);
    result.setComment(Util.stripComment(d));
  }
  (
    optionStatement(result)
  )*
  (
    constant=constant()
    {
      result.addConstant(constant);
    }
  | reserved()
  )*
  "}"
  {
    return result;
  }
}

Constant constant() :
{
  Constant result = Constant.create();
  String name;
  Token index;
}
{
  { result.setComment(Util.stripComment(token.next)); }
  javaAnnotationsFor(result)
  name=name()
  {
    result.setName(name);
  }
  (
    "=" index=< NUMBER >
    {
      result.setIndex(Integer.parseInt(index.image));
    }
  )?
  partOptions(result)
  ";"
  {
    return result;
  }
}

MessageDef message() :
{
  MessageDef result = MessageDef.create();
  String name;
  QName generalization;
  WithOptions<?> def;
  Field field;
  Token comment;
}
{
  (    < ABSTRACT >
    {
      result.setAbstract(true);
    }
  )?
  < MESSAGE > name=name()
  {
    result.setName(name);
  }
  (
    < EXTENDS > generalization=qName()
    {
		result.setExtends(generalization);
    }
  )?
  "{"
  ( optionStatement(result)
  | def = memberDefinition()
    {
      if (def instanceof Field) {
	    result.addField((Field) def);
      } else {
	    result.addDefinition((Definition<?>) def);
      }
    } 
  | oneof()
  | reserved()
  )*
  "}"
  {
    return result;
  }
}

Field field() :
{
  Field result = Field.create();
  Type<?> type;
  String name;
  Token index;
  Token comment;
  Option<?> option;
  Token optionName;
}
{
  (
    < TRANSIENT >
    {
      result.setTransient(true);
    }
  )?
  (
    < REPEATED >
    {
      result.setRepeated(true);
    }
  )?
  type=type()
  {
    result.setType(type);
  }
  name=name()
  {
    result.setName(name);
  }
  (
    "=" index=< NUMBER >
    {
      result.setIndex(Integer.parseInt(index.image));
    }
  )?
  partOptions(result)
  ";"
  {
    return result;  }}

WithOptions<?> javaAnnotations() :
{
  WithOptions<?> result;
}
{
  result=javaAnnotationsFor(null)
  {
    return result;
  }
}

WithOptions<?> javaAnnotationsFor(WithOptions<?> result) :
{
  Token optionName;
  Option<?> option;
}
{
  (
    { if (result == null) result = OptionContainer.create(); }
    
    "@" optionName=<  NAME >
    (
      "(" option=value() ")"
      { result.getOptions().put(optionName.image, option); }
    |
      { result.getOptions().put(optionName.image, Flag.create().setValue(true)); }
    )
  )*
  {
    return result;
  }
}

void partOptions(Part<?> part) :
{
}
{
  (
    "["
	optionAssignment(part)
	( ","
	  optionAssignment(part)
	)*
    "]"
  )? 
}

void reserved() :
{
}
{
 < RESERVED > reservation() ( "," reservation() )* ";"
}

void reservation() : 
{
}
{
  (
    < NUMBER > ( < TO > ( < NUMBER > | < MAX > ) )?
  | < STRING >
  )
}

void oneof() :
{
}
{
  < ONEOF > < NAME > "{"
	(	  type() < NAME > ( "=" < NUMBER > )? ";"
	)+
  "}"
}

Type<?> type() :
{
  Type<?> result;
}
{
  (    result=primitiveType()
  | result=customType()
  | result=map()
  )
  {
    return result;
  }
}

PrimitiveType primitiveType() :
{
  Token t;
  PrimitiveType result;
}
{
  (
	t=< TYPE >    { result = PrimitiveType.create().setKind(PrimitiveType.Kind.valueOfProtocol(t.image.toUpperCase())); }
  | t=< INT_TYPE >
    { result = PrimitiveType.create().setKind(PrimitiveType.Kind.INT_32); }
  | t=< LONG_TYPE >
    { result = PrimitiveType.create().setKind(PrimitiveType.Kind.INT_64); }
  | t=< BOOLEAN_TYPE >
    { result = PrimitiveType.create().setKind(PrimitiveType.Kind.BOOL); }
  )
  { return result; }
}

CustomType customType() :
{
  QName name;  
}
{
  name=qName()
  {
    return CustomType.create().setName(name);
  }
}

MapType map() :
{
  Type<?> keyType;
  Type<?> valueType;
}
{
  < MAP > "<" keyType=type() "," valueType=type() ">"
  {
    return MapType.create().setKeyType(keyType).setValueType(valueType);
  }
}

QName qName() :
{
  QName result = QName.create();
  String name;
}
{
  name = name()
  {
    result.addName(name);
  }
  (
    "." name = name()
    {
      result.addName(name);
    }
  )*
  {
    return result;
  }
}

String name() :
{
  Token t;
  String result;
}
{
  (
    t = < NAME >
    { result = t.image; }
  | t = < TO >
    { result = t.image; }
  | t = < MAX >
    { result = t.image; }
  | t = < XNAME >
    { result = t.image.substring(1, t.image.length() - 1); }
  )
  {
    return result;
  }
}

