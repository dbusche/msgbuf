/* Generated By:JavaCC: Do not edit this line. ProtobufParser.java */
package de.haumacher.msgbuf.generator.parser;

import de.haumacher.msgbuf.generator.ast.*;
import de.haumacher.msgbuf.generator.common.Util;

/**
 * Parser for protobuf definition files..
 */
public class ProtobufParser implements ProtobufParserConstants {

  final public DefinitionFile file() throws ParseException {
  DefinitionFile result = DefinitionFile.create();
  QName pkgName;
  Definition def;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYNTAX:
      jj_consume_token(SYNTAX);
      jj_consume_token(33);
      jj_consume_token(STRING);
      jj_consume_token(34);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      jj_consume_token(PACKAGE);
      pkgName = qName();
      jj_consume_token(34);
                result.setPackage(pkgName);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPTION:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      optionStatement(result);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MESSAGE:
      case ENUM:
      case ABSTRACT:
      case 37:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      def = definition();
      result.addDefinition(def);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public void optionStatement(WithOptions part) throws ParseException {
    jj_consume_token(OPTION);
    optionAssignment(part);
    jj_consume_token(34);
  }

  final public void optionAssignment(WithOptions part) throws ParseException {
  Option option;
  Token t;
    t = jj_consume_token(NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
      option = value();
          part.getOptions().put(t.image, option);
      break;
    default:
      jj_la1[4] = jj_gen;
          part.getOptions().put(t.image, Flag.create().setValue(true));
    }
  }

  final public Option value() throws ParseException {
  Option result;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t = jj_consume_token(STRING);
      result = StringOption.create().setValue(Util.stringContent(t.image));
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
      result = NumberOption.create().setValue(Double.parseDouble(t.image));
      break;
    case TRUE:
      jj_consume_token(TRUE);
      result = Flag.create().setValue(true);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      result = Flag.create().setValue(false);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Definition definition() throws ParseException {
  String comment;
  Definition result;
  WithOptions options;
    comment = Util.stripComment(token.next);
    options = javaAnnotations();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MESSAGE:
    case ABSTRACT:
      result = message();
      break;
    case ENUM:
      result = enumeration();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    result.setComment(comment);
    if (options != null) result.setOptions(options.getOptions());
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public DefinitionBase memberDefinition() throws ParseException {
  String comment;
  DefinitionBase result;
  WithOptions options;
    comment = Util.stripComment(token.next);
    options = javaAnnotations();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MESSAGE:
    case ABSTRACT:
      result = message();
      break;
    case ENUM:
      result = enumeration();
      break;
    case MAP:
    case REPEATED:
    case TRANSIENT:
    case TO:
    case MAX:
    case INT_TYPE:
    case LONG_TYPE:
    case BOOLEAN_TYPE:
    case TYPE:
    case XNAME:
    case NAME:
      result = field();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    result.setComment(comment);
    if (options != null) result.setOptions(options.getOptions());
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EnumDef enumeration() throws ParseException {
  EnumDef result = EnumDef.create();
  String name;
  Constant constant;
  Token d;
    d = jj_consume_token(ENUM);
    name = name();
    jj_consume_token(35);
    result.setName(name);
    result.setComment(Util.stripComment(d));
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPTION:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      optionStatement(result);
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESERVED:
      case TO:
      case MAX:
      case XNAME:
      case NAME:
      case 37:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
      case MAX:
      case XNAME:
      case NAME:
      case 37:
        constant = constant();
      result.addConstant(constant);
        break;
      case RESERVED:
        reserved();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(36);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Constant constant() throws ParseException {
  Constant result = Constant.create();
  String name;
  Token index;
    result.setComment(Util.stripComment(token.next));
    javaAnnotationsFor(result);
    name = name();
    result.setName(name);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
      index = jj_consume_token(NUMBER);
      result.setIndex(Integer.parseInt(index.image));
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    partOptions(result);
    jj_consume_token(34);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public MessageDef message() throws ParseException {
  MessageDef result = MessageDef.create();
  String name;
  QName generalization;
  WithOptions def;
  Field field;
  Token comment;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
      result.setAbstract(true);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(MESSAGE);
    name = name();
    result.setName(name);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      generalization = qName();
                result.setExtends(generalization);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(35);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MESSAGE:
      case ENUM:
      case MAP:
      case ONEOF:
      case REPEATED:
      case TRANSIENT:
      case OPTION:
      case ABSTRACT:
      case RESERVED:
      case TO:
      case MAX:
      case INT_TYPE:
      case LONG_TYPE:
      case BOOLEAN_TYPE:
      case TYPE:
      case XNAME:
      case NAME:
      case 37:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPTION:
        optionStatement(result);
        break;
      case MESSAGE:
      case ENUM:
      case MAP:
      case REPEATED:
      case TRANSIENT:
      case ABSTRACT:
      case TO:
      case MAX:
      case INT_TYPE:
      case LONG_TYPE:
      case BOOLEAN_TYPE:
      case TYPE:
      case XNAME:
      case NAME:
      case 37:
        def = memberDefinition();
      if (def instanceof Field) {
            result.addField((Field) def);
      } else {
            result.addDefinition((Definition) def);
      }
        break;
      case ONEOF:
        oneof();
        break;
      case RESERVED:
        reserved();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(36);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Field field() throws ParseException {
  Field result = Field.create();
  Type type;
  String name;
  Token index;
  Token comment;
  Option option;
  Token optionName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRANSIENT:
      jj_consume_token(TRANSIENT);
      result.setTransient(true);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REPEATED:
      jj_consume_token(REPEATED);
      result.setRepeated(true);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    type = type();
    result.setType(type);
    name = name();
    result.setName(name);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
      index = jj_consume_token(NUMBER);
      result.setIndex(Integer.parseInt(index.image));
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    partOptions(result);
    jj_consume_token(34);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public WithOptions javaAnnotations() throws ParseException {
  WithOptions result;
    result = javaAnnotationsFor(null);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public WithOptions javaAnnotationsFor(WithOptions result) throws ParseException {
  Token optionName;
  Option option;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      if (result == null) result = OptionContainer.create();
      jj_consume_token(37);
      optionName = jj_consume_token(NAME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        jj_consume_token(38);
        option = value();
        jj_consume_token(39);
        result.getOptions().put(optionName.image, option);
        break;
      default:
        jj_la1[20] = jj_gen;
        result.getOptions().put(optionName.image, Flag.create().setValue(true));
      }
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public void partOptions(Part part) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      jj_consume_token(40);
      optionAssignment(part);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 41:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_7;
        }
        jj_consume_token(41);
        optionAssignment(part);
      }
      jj_consume_token(42);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
  }

  final public void reserved() throws ParseException {
    jj_consume_token(RESERVED);
    reservation();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
      jj_consume_token(41);
      reservation();
    }
    jj_consume_token(34);
  }

  final public void reservation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      jj_consume_token(NUMBER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
        jj_consume_token(TO);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          jj_consume_token(NUMBER);
          break;
        case MAX:
          jj_consume_token(MAX);
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void oneof() throws ParseException {
    jj_consume_token(ONEOF);
    jj_consume_token(NAME);
    jj_consume_token(35);
    label_9:
    while (true) {
      type();
      jj_consume_token(NAME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
        jj_consume_token(NUMBER);
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(34);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAP:
      case TO:
      case MAX:
      case INT_TYPE:
      case LONG_TYPE:
      case BOOLEAN_TYPE:
      case TYPE:
      case XNAME:
      case NAME:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_9;
      }
    }
    jj_consume_token(36);
  }

  final public Type type() throws ParseException {
  Type result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_TYPE:
    case LONG_TYPE:
    case BOOLEAN_TYPE:
    case TYPE:
      result = primitiveType();
      break;
    case TO:
    case MAX:
    case XNAME:
    case NAME:
      result = customType();
      break;
    case MAP:
      result = map();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public PrimitiveType primitiveType() throws ParseException {
  Token t;
  PrimitiveType result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
      t = jj_consume_token(TYPE);
      result = PrimitiveType.create().setKind(PrimitiveType.Kind.valueOfProtocol(t.image.toUpperCase()));
      break;
    case INT_TYPE:
      t = jj_consume_token(INT_TYPE);
      result = PrimitiveType.create().setKind(PrimitiveType.Kind.INT_32);
      break;
    case LONG_TYPE:
      t = jj_consume_token(LONG_TYPE);
      result = PrimitiveType.create().setKind(PrimitiveType.Kind.INT_64);
      break;
    case BOOLEAN_TYPE:
      t = jj_consume_token(BOOLEAN_TYPE);
      result = PrimitiveType.create().setKind(PrimitiveType.Kind.BOOL);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public CustomType customType() throws ParseException {
  QName name;
    name = qName();
    {if (true) return CustomType.create().setName(name);}
    throw new Error("Missing return statement in function");
  }

  final public MapType map() throws ParseException {
  Type keyType;
  Type valueType;
    jj_consume_token(MAP);
    jj_consume_token(43);
    keyType = type();
    jj_consume_token(41);
    valueType = type();
    jj_consume_token(44);
    {if (true) return MapType.create().setKeyType(keyType).setValueType(valueType);}
    throw new Error("Missing return statement in function");
  }

  final public QName qName() throws ParseException {
  QName result = QName.create();
  String name;
    name = name();
    result.addName(name);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_10;
      }
      jj_consume_token(45);
      name = name();
      result.addName(name);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String name() throws ParseException {
  Token t;
  String result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      t = jj_consume_token(NAME);
      result = t.image;
      break;
    case TO:
      t = jj_consume_token(TO);
      result = t.image;
      break;
    case MAX:
      t = jj_consume_token(MAX);
      result = t.image;
      break;
    case XNAME:
      t = jj_consume_token(XNAME);
      result = t.image.substring(1, t.image.length() - 1);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ProtobufParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x100,0x10000,0x40c00,0x0,0x30c00000,0x40c00,0x4f34dc00,0x10000,0x40380000,0x40380000,0x0,0x40000,0x20000,0x4f3dfc00,0x4f3dfc00,0x8000,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x10200000,0x100000,0x30000000,0x0,0x4f301000,0x4f301000,0xf000000,0x0,0x40300000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x20,0x2,0x0,0x0,0x1,0x0,0x21,0x21,0x2,0x0,0x0,0x21,0x21,0x0,0x0,0x2,0x20,0x40,0x200,0x100,0x200,0x0,0x0,0x0,0x2,0x1,0x1,0x0,0x2000,0x1,};
   }

  /** Constructor with InputStream. */
  public ProtobufParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ProtobufParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ProtobufParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ProtobufParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProtobufParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ProtobufParser(ProtobufParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ProtobufParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
